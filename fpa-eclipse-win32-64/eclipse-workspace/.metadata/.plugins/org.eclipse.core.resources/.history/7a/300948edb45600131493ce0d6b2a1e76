package de.bht.fpa.mail.s797399.fsnavigation;

import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;

import javax.xml.bind.JAXB;

import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.IExecutionListener;
import org.eclipse.core.commands.NotHandledException;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.commands.ICommandService;
import org.eclipse.ui.part.ViewPart;

import de.bht.fpa.mail.s000000.common.mail.model.Message;

public class NavigationView extends ViewPart {
  public static final String ID = "de.bht.fpa.s797399.fsnavigation.NavigationView";
  protected TreeViewer viewer;

  /**
   * This is a callback that will allow us to create the viewer and initialize
   * it.
   */
  @Override
  public void createPartControl(Composite parent) {
    // a TreeViewer is a Jface widget, which shows trees
    viewer = new TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);

    // We set the ContentProvider for the TreeViewer. This class prepares data
    // to be shown by the TreeViewer.
    viewer.setContentProvider(new ViewContentProvider());

    // We set the LabelProvider. This class decides how elements in the tree are
    // shown by returning a text and an optional icon.
    viewer.setLabelProvider(new ViewLabelProvider());

    // Here we set the root of the tree. The framework will ask for more data
    // when the user expands tree items.
    viewer.setInput(createModel());
    viewer.addSelectionChangedListener(new TreeSelectionListener());
    ICommandService commandService = (ICommandService) PlatformUI.getWorkbench().getActiveWorkbenchWindow()
        .getService(ICommandService.class);
    commandService.addExecutionListener(new TreeExecutionListener());
  }

  /**
   * We will set up a model to initialize tree hierarchy.
   */
  private Object createModel() {
    // Our root item is simply a dummy Object. Here you need to provide your own
    // root class.
    return System.getProperty("user.home");
  }

  /**
   * Passing the focus request to the viewer's control.
   */
  @Override
  public void setFocus() {
    viewer.getControl().setFocus();
  }

  class TreeExecutionListener implements IExecutionListener {

    @Override
    public void notHandled(String commandId, NotHandledException exception) {
      // TODO Auto-generated method stub

    }

    @Override
    public void postExecuteFailure(String commandId, ExecutionException exception) {
      // TODO Auto-generated method stub

    }

    @Override
    public void postExecuteSuccess(String commandId, Object returnValue) {
      if (returnValue != null) {
        viewer.setInput(returnValue);
        // viewer.collapseAll();
        // viewer.refresh();
      }
    }

    @Override
    public void preExecute(String commandId, ExecutionEvent event) {
      // TODO Auto-generated method stub

    }

  }

  class TreeSelectionListener implements ISelectionChangedListener {

    @Override
    public void selectionChanged(SelectionChangedEvent event) {
      Object dir = null;
      IStructuredSelection ss = (IStructuredSelection) viewer.getSelection();
      if (ss.size() == 1) {
        dir = ss.getFirstElement();
      }
      if (dir instanceof File) {
        System.out.println("Selected Directory:  " + dir);
        File[] xmlfiles = ((File) dir).listFiles(new FilenameFilter() {
          @Override
          public boolean accept(File dir, String name) {
            return name.toLowerCase().endsWith(".xml");
          }
        });
        ArrayList<Message> messages = new ArrayList<Message>();
        Message message = null;
        if(xmlfiles != null){
        for (File xml : xmlfiles) {
          try {
            message = JAXB.unmarshal(xml, Message.class);
          } catch (RuntimeException e) {
            continue;
          }
          if (message != null && message.getId() != 0) {
            messages.add(message);
          }
        }
        System.out.println("Number of Messages:  " + messages.size() + "\n");
        for (Message msg : messages) {
          System.out.println(msg);
        }
        }
      }
    }
  }
}
